<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/hakanbs/GalleryRescueActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/hakanbs/GalleryRescueActivity.kt" />
              <option name="originalContent" value="package com.example.hakanbs&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import kotlinx.coroutines.MainScope&#10;import kotlinx.coroutines.launch&#10;&#10;class GalleryRescueActivity : AppCompatActivity(), GalleryRescueGameView.GameStateListener {&#10;&#10;    private lateinit var tvScore: TextView&#10;    private lateinit var tvLives: TextView&#10;    private lateinit var tvTime: TextView&#10;    private lateinit var tvPercent: TextView&#10;    private lateinit var btnRestart: Button&#10;    private lateinit var gameView: GalleryRescueGameView&#10;&#10;    private val activityScope = MainScope()&#10;    private var currentLevel: Int = 1 // 1. seviye ile başla&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_gallery_rescue)&#10;&#10;        tvScore = findViewById(R.id.tv_score)&#10;        tvLives = findViewById(R.id.tv_lives)&#10;        tvTime = findViewById(R.id.tv_time)&#10;        tvPercent = findViewById(R.id.tv_percent)&#10;        btnRestart = findViewById(R.id.btn_restart)&#10;&#10;        val gameArea = findViewById&lt;FrameLayout&gt;(R.id.game_area)&#10;        gameView = GalleryRescueGameView(this).apply {&#10;            setGameStateListener(this@GalleryRescueActivity)&#10;        }&#10;        gameArea.addView(gameView)&#10;&#10;        // İlk açılışta level 1 için RemoteConfig arka planı uygula + başlat:&#10;        applyRemoteBgAndRestart(currentLevel)&#10;&#10;        // Aynı seviyeyi yeniden başlatmak istersen:&#10;        btnRestart.setOnClickListener {&#10;            applyRemoteBgAndRestart(currentLevel)&#10;        }&#10;    }&#10;&#10;    // --- Yardımcılar ---&#10;&#10;    // Hatalı fonksiyonun doğru hali:&#10;    private fun pickBgUrlFor(level: Int, config: RemoteConfig): String? {&#10;        return when (level) {&#10;            1 -&gt; config.backgroundUrl1&#10;            2 -&gt; config.backgroundUrl2&#10;            3 -&gt; config.backgroundUrl3&#10;            else -&gt; config.backgroundUrl1&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Remote Config’i çek, ilgili seviye için URL’i (boş değilse) uygula, sonra oyunu başlat/yeniden başlat.&#10;     * Önemli: URL boş/yanlış gelirse yerel fallback’e dönmemek için setBackgroundUrl()’e boş değer göndermiyoruz.&#10;     */&#10;    private fun applyRemoteBgAndRestart(level: Int) {&#10;        val controlConfig = ControlConfig(this)&#10;        activityScope.launch {&#10;            val config = controlConfig.fetchConfig()&#10;            val url = config?.let { pickBgUrlFor(level, it) }&#10;&#10;            // 1) Her zaman önce URL’i uygula (boşsa dokunma — önceki görsel kalsın)&#10;            if (url != null) {&#10;                gameView.setBackgroundUrl(url)&#10;            }&#10;&#10;            // 2) Sonra oyunu başlat / yeniden başlat&#10;            gameView.restartGame()&#10;        }&#10;    }&#10;&#10;    // --- GameStateListener ---&#10;&#10;    override fun onGameStateChanged(lives: Int, score: Long, timerSeconds: Int, revealPercent: Float) {&#10;        tvScore.text = &quot;★ $score&quot;&#10;        tvLives.text = &quot;❤ $lives&quot;&#10;        tvTime.text = &quot;⏰ $timerSeconds&quot;&#10;        tvPercent.text = &quot;%${revealPercent.toInt()}&quot;&#10;    }&#10;&#10;    /**&#10;     * GameView tarafı seviye atladı dediğinde çağrılacak.&#10;     * (Senin GameView’ında zaten bu callback var; burada yeni seviye için RemoteConfig arka planı alıp restart ediyoruz)&#10;     */&#10;    override fun onLevelChanged(newLevel: Int) {&#10;        currentLevel = newLevel&#10;        applyRemoteBgAndRestart(currentLevel)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.hakanbs&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.hakanbs.RemoteConfig&#10;import kotlinx.coroutines.MainScope&#10;import kotlinx.coroutines.launch&#10;&#10;class GalleryRescueActivity : AppCompatActivity(), GalleryRescueGameView.GameStateListener {&#10;&#10;    private lateinit var tvScore: TextView&#10;    private lateinit var tvLives: TextView&#10;    private lateinit var tvTime: TextView&#10;    private lateinit var tvPercent: TextView&#10;    private lateinit var btnRestart: Button&#10;    private lateinit var gameView: GalleryRescueGameView&#10;&#10;    private val activityScope = MainScope()&#10;    private var currentLevel: Int = 1 // 1. seviye ile başla&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_gallery_rescue)&#10;&#10;        tvScore = findViewById(R.id.tv_score)&#10;        tvLives = findViewById(R.id.tv_lives)&#10;        tvTime = findViewById(R.id.tv_time)&#10;        tvPercent = findViewById(R.id.tv_percent)&#10;        btnRestart = findViewById(R.id.btn_restart)&#10;&#10;        val gameArea = findViewById&lt;FrameLayout&gt;(R.id.game_area)&#10;        gameView = GalleryRescueGameView(this).apply {&#10;            setGameStateListener(this@GalleryRescueActivity)&#10;        }&#10;        gameArea.addView(gameView)&#10;&#10;        // İlk açılışta level 1 için RemoteConfig arka planı uygula + başlat:&#10;        applyRemoteBgAndRestart(currentLevel)&#10;&#10;        // Aynı seviyeyi yeniden başlatmak istersen:&#10;        btnRestart.setOnClickListener {&#10;            applyRemoteBgAndRestart(currentLevel)&#10;        }&#10;    }&#10;&#10;    // --- Yardımcılar ---&#10;&#10;    // Hatalı fonksiyonun doğru hali:&#10;    private fun pickBgUrlFor(level: Int, config: RemoteConfig): String? {&#10;        return when (level) {&#10;            1 -&gt; config.backgroundUrl1&#10;            2 -&gt; config.backgroundUrl2&#10;            3 -&gt; config.backgroundUrl3&#10;            else -&gt; config.backgroundUrl1&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Remote Config’i çek, ilgili seviye için URL’i (boş değilse) uygula, sonra oyunu başlat/yeniden başlat.&#10;     * Önemli: URL boş/yanlış gelirse yerel fallback’e dönmemek için setBackgroundUrl()’e boş değer göndermiyoruz.&#10;     */&#10;    private fun applyRemoteBgAndRestart(level: Int) {&#10;        val controlConfig = ControlConfig(this)&#10;        activityScope.launch {&#10;            val config = controlConfig.fetchConfig()&#10;            val url = config?.let { pickBgUrlFor(level, it) }&#10;&#10;            // 1) Her zaman önce URL’i uygula (boşsa dokunma — önceki görsel kalsın)&#10;            if (url != null) {&#10;                gameView.setBackgroundUrl(url)&#10;            }&#10;&#10;            // 2) Sonra oyunu başlat / yeniden başlat&#10;            gameView.restartGame()&#10;        }&#10;    }&#10;&#10;    // --- GameStateListener ---&#10;&#10;    override fun onGameStateChanged(lives: Int, score: Long, timerSeconds: Int, revealPercent: Float) {&#10;        tvScore.text = &quot;★ $score&quot;&#10;        tvLives.text = &quot;❤ $lives&quot;&#10;        tvTime.text = &quot;⏰ $timerSeconds&quot;&#10;        tvPercent.text = &quot;%${revealPercent.toInt()}&quot;&#10;    }&#10;&#10;    /**&#10;     * GameView tarafı seviye atladı dediğinde çağrılacak.&#10;     * (Senin GameView’ında zaten bu callback var; burada yeni seviye için RemoteConfig arka planı alıp restart ediyoruz)&#10;     */&#10;    override fun onLevelChanged(newLevel: Int) {&#10;        currentLevel = newLevel&#10;        applyRemoteBgAndRestart(currentLevel)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@color/purple_700&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;&lt;/vector&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@color/purple_700&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>